import os 
#Set current working directory to file path
os.chdir(os.path.dirname(os.path.realpath(__file__)))

import json
from azureml.core import Workspace, Experiment, ScriptRunConfig, Environment, Model
from azureml.core.conda_dependencies import CondaDependencies
from azureml.widgets import RunDetails

### Connect to workspace
ws = Workspace.from_config()

"""
### Add datastore 
from azureml.core import Datastore
blob_ds = Datastore.register_azure_blob_container(workspace=ws,
                                                datastore_name='blob_data',
                                                container_name='data_container',
                                                account_name='',
                                                account_key='')
"""

### Running script as an experiment 

#Create a python environment for the experiment
sklearn_env = Environment("sklearn-env")

#Ensure that the required packages are installed 
packages = CondaDependencies.create(conda_packages=['scikit-learn', 'pandas', 'pip'], pip_packages=['azureml-defaults'])
sklearn_env.python.conda_dependencies = packages

#Create a script config
script_config = ScriptRunConfig(source_directory='', script='azureml_run_script.py', arguments=['--train-size', 0.7], environment=sklearn_env)

#Submit the experiment 
experiment = Experiment(workspace=ws, name='training-experiment')
run = experiment.submit(config=script_config)
run.wait_for_completion()

#List the files generated by the experiment
for file in run.get_file_names():
    print(file)

#Download a named file to the local file system.
#run.download_file(name='outputs/model.pkl', output_file_path='model.pkl')

model = run.register_model(model_name='regression_model',
                   model_path='outputs/model.pkl', #run outputs path
                   description='A regression model',
                   tags={'data-format': 'CSV'},
                   model_framework=Model.Framework.SCIKITLEARN,
                   model_framework_version='0.20.3')
"""
#Registering a model
#Enables you to track multiple versions of a model, and retrieve models 
# for inferencing. 
model = Model.register(workspace=ws, 
                        model_name='regression_model',
                        model_path='model.pkl', #local path
                        description='A regression model',
                        tags={'data-format': 'CSV'},
                        model_framework=Model.Framework.SCIKITLEARN,
                        model_framework_version='0.20.3')

#Viewing registered models
for model in Model.list(ws):
    #Get model name and auto-generated version
    print(model.name, 'version:', model.version)
"""
